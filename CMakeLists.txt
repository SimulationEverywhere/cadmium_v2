cmake_minimum_required(VERSION 3.1)
project(cadmium)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/bin)

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()
set(CMAKE_CXX_FLAGS_DEBUG "-g")
set(CMAKE_CXX_FLAGS_RELEASE "-O3")

add_library(cadmium INTERFACE)
target_include_directories(cadmium INTERFACE include/ json/include)

FILE(GLOB Examples RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} example/*/main_*.cpp)
foreach(exampleSrc ${Examples})
    get_filename_component(exampleName ${exampleSrc} NAME_WE)
    get_filename_component(dirname ${exampleSrc} DIRECTORY)
    file(GLOB directorySrc CONFIGURE_DEPENDS "${dirname}/src/*.cpp")
    add_executable(${exampleName} ${exampleSrc} ${directorySrc})
    target_include_directories(${exampleName} PUBLIC "${dirname}/include")
    target_link_libraries(${exampleName} cadmium)
endforeach(exampleSrc)

if(APPLE)
    # Apple Clang does not pack OpenMP. We must install it via HomeBrew and link it manually
    if(CMAKE_C_COMPILER_ID MATCHES "Clang\$")
        set(OpenMP_C_FLAGS "-Xpreprocessor -fopenmp")
        set(OpenMP_C_LIB_NAMES "omp")
        set(OpenMP_omp_LIBRARY omp)
    endif()
    if(CMAKE_CXX_COMPILER_ID MATCHES "Clang\$")
        set(OpenMP_CXX_FLAGS "-Xpreprocessor -fopenmp")
        set(OpenMP_CXX_LIB_NAMES "omp")
        set(OpenMP_omp_LIBRARY omp)
    endif()
endif()
find_package(OpenMP)
if(OpenMP_CXX_FOUND)
    if (APPLE)
        # HomeBrew leaves a symlink to the installed version of OpenMP in these directories
        include_directories("/usr/local/opt/libomp/include")
        link_directories("/usr/local/opt/libomp/lib")
    endif()
    FILE(GLOB Examples RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} example/*/parallel_main_*.cpp)
    foreach(exampleSrc ${Examples})
        get_filename_component(exampleName ${exampleSrc} NAME_WE)
        get_filename_component(dirname ${exampleSrc} DIRECTORY)
        file(GLOB directorySrc CONFIGURE_DEPENDS "${dirname}/src/*.cpp")
        add_executable(${exampleName} ${exampleSrc} ${directorySrc})
        target_include_directories(${exampleName} PUBLIC "${dirname}/include")
        target_link_libraries(${exampleName} PUBLIC cadmium OpenMP::OpenMP_CXX)
    endforeach(exampleSrc)
else()
    message(STATUS "OpenMP not found. You won't be able to use parallel simulation.")
endif()

find_package(Boost COMPONENTS system filesystem unit_test_framework)
if(Boost_FOUND)
    add_definitions(-DBOOST_TEST_DYN_LINK)
    enable_testing()
    FILE(GLOB Tests RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} test/*/test_*.cpp)
    foreach(testSrc ${Tests})
        get_filename_component(testName ${testSrc} NAME_WE)
        string(REGEX MATCH "[a-z]+$" useCase ${testName})
        file(GLOB directorySrc CONFIGURE_DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/example/${useCase}/src/*.cpp")
        add_executable(${testName} ${testSrc} ${directorySrc})
        target_include_directories(${testName} PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/example/${useCase}/include")
        target_link_libraries(${testName} cadmium ${Boost_FILESYSTEM_LIBRARY}
                ${Boost_SYSTEM_LIBRARY} ${Boost_UNIT_TEST_FRAMEWORK_LIBRARY})
        add_test(NAME ${testName} COMMAND ${testName})
    endforeach(testSrc)
else()
    message(STATUS "Boost not found. You won't be able to run nor develop tests for Cadmium.")
endif()
